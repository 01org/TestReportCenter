<?php

/**
 * TestResultTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TestResultTable extends PluginTestResultTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object TestResultTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TestResult');
    }

    public function getMeasure($resultId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT tr.id, tr.name, tr.complement, tr.decision_criteria_id, tr.status, tr.bugs, tr.comment, m.description, m.value, m.unit, m.category, m.operator, m.measure_id
				FROM ".$qa_generic.".test_result tr
					JOIN ".$qa_generic.".measure m ON m.test_result_id = tr.id
				WHERE tr.id = ".$resultId."";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	$testResult = null;
    	$values = array();

    	$resultId = null;
    	foreach($result as $row)
    	{
    		// For each test result
    		if($resultId != $row["id"])
    		{
    			// Push previous test result and its values into main array
    			if($testResult != null)
    			{
    				if(!empty($values))
    					$testResult["measures"] = $values;
    			}

    			// Set current result identifier
    			$resultId = $row["id"];

    			// Build current test result
    			$testResult = array("id" => $row["id"], "name" => $row["name"], "complement" => $row["complement"], "decision_criteria_id" => $row["decision_criteria_id"], "comment" => $row["comment"]);
    			$values = array();
    		}

    		// Assume for now there is only one triplet value/target/limit
    		if($row["category"] == 1)
    		{
    			// TODO Append other result's values to same array
    			$values["value"] = array("value" => $row["value"], "unit" => $row["unit"], "operator" => $row["operator"], "description" => $row["description"]);
    		}
    		else if($row["category"] == 2)
    		{
    			$values["target"] = array("value" => $row["value"], "unit" => $row["unit"], "description" => $row["description"]);
    		}
    		else if($row["category"] == 3)
    		{
    			$values["limit"] = array("value" => $row["value"], "unit" => $row["unit"], "description" => $row["description"]);
    		}
    	}

    	// Push last test result and values into main array
    	if($testResult != null)
    	{
    		if(!empty($values))
    			$testResult["measures"] = $values;
    	}

    	return $testResult;
    }
}