<?php

/**
 * ProjectTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProjectTable extends PluginProjectTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object ProjectTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Project');
    }

    /**
     * Check if given slug does not already exist in the database.
     *
     * @param string $slug The slug.
     *
     * @return boolean TRUE if the slug exists, FALSE otherwise.
     */
    public function checkSlugForProject($projectId, $slug, $new)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	if ($new)
    	{
    		$query = "SELECT * FROM ".$qa_generic.".project p WHERE p.name_slug = '".$slug."'";
    	}
    	else
    	{
    		$query = "SELECT * FROM ".$qa_generic.".project p WHERE p.name_slug = '".$slug."' AND p.id NOT IN ( ".$projectId." )";
    	}
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->rowCount();

    	if($result > 0)
    		return true;

    	return false;
    }

    /**
     * Get basic informations of available products for given project group and project.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The product identifier.
     *
     * @return array An associative array with identifiers and names of the products, or NULL.
     */
	public function getBasicProducts($projectGroupId, $projectId)
	{
		$qa_core = sfConfig::get("app_table_qa_core");
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT pt.id, pt.name, pt.name_slug
			FROM ".$qa_core.".product_type pt
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.product_id = pt.id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
			GROUP BY pt.id
			ORDER BY pt.name ASC";
		$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

		return $result;
	}

    /**
     * Get all images available under environments for given group, project and products.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param array $productIds An array with product identifiers.
     * @param bool $filter TRUE to filter by recent test sessions, FALSE otherwise.
     *
     * @return array An associative array with images and environments names.
     */
    public function getImagesForEnvironments($projectGroupId, $projectId, $productIds, $filter = false)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");
		$filterPeriod = sfConfig::get("app_views_filter_period");

    	$query = "SELECT DISTINCT ptp.product_id, te.id AS te_id, te.name AS te_name, i.id AS i_id, i.name AS i_name, te.name_slug AS te_slug, i.name_slug AS i_slug
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id IN (".implode(',', $productIds).")
				AND (SELECT COUNT(*)
						FROM ".$qa_generic.".test_session ts
						WHERE ts.configuration_id = c.id
							AND ts.published = 1";
    	if($filter)
    		$query .= "		AND ts.created_at >= (now() - INTERVAL ".$filterPeriod." SECOND)";
    	$query .= "	)
			ORDER BY ptp.product_id ASC, te.name ASC, i.name DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

		return $result;
    }

    /**
     * Get all images available under environments for given group, project and products, and add builds of test sessions.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param array $productIds An array with product identifiers.
     * @param bool $filter TRUE to filter by recent test sessions, FALSE otherwise.
     *
     * @return array An associative array with images and environments names.
     */
    public function getImagesForEnvironmentsForBuilds($projectGroupId, $projectId, $productIds, $filter = false)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");
    	$filterPeriod = sfConfig::get("app_views_filter_period");

    	$query = "SELECT DISTINCT ptp.product_id, te.id AS te_id, te.name AS te_name, ts.build_id AS ts_build_id, ts.build_slug AS ts_build_slug, i.id AS i_id, i.name AS i_name, te.name_slug AS te_slug, i.name_slug AS i_slug
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".test_session ts ON ts.configuration_id = c.id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id IN (".implode(',', $productIds).")
				AND (SELECT COUNT(*)
						FROM ".$qa_generic.".test_session ts
						WHERE ts.configuration_id = c.id
							AND ts.published = 1";
    	if($filter)
    		$query .= "		AND ts.created_at >= (now() - INTERVAL ".$filterPeriod." SECOND)";
    	$query .= "	)
    			AND ts.build_id != ''
			ORDER BY ptp.product_id ASC, ts.build_id DESC, te.name ASC, i.name DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all images available under environments for given group, project and products, and add testsets of test sessions.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param array $productIds An array with product identifiers.
     * @param bool $filter TRUE to filter by recent test sessions, FALSE otherwise.
     *
     * @return array An associative array with images and environments names.
     */
    public function getImagesForEnvironmentsForTestsets($projectGroupId, $projectId, $productIds, $filter = false)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");
    	$filterPeriod = sfConfig::get("app_views_filter_period");

    	$query = "SELECT DISTINCT ptp.product_id, te.id AS te_id, te.name AS te_name, ts.testset AS ts_testset, ts.testset_slug AS ts_testset_slug, i.id AS i_id, i.name AS i_name, te.name_slug AS te_slug, i.name_slug AS i_slug
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".test_session ts ON ts.configuration_id = c.id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id IN (".implode(',', $productIds).")
				AND (SELECT COUNT(*)
						FROM ".$qa_generic.".test_session ts
						WHERE ts.configuration_id = c.id
							AND ts.published = 1";
    	if($filter)
    		$query .= "		AND ts.created_at >= (now() - INTERVAL ".$filterPeriod." SECOND)";
    	$query .= "	)
    			AND ts.testset != ''
			ORDER BY ptp.product_id ASC, ts.testset ASC, te.name ASC, i.name DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get basic informations of available projects for given project group and security level.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $securityLevel The security level.
     *
     * @return array An associative array with identifiers and names of the projects.
     */
	public function getBasicProjects($projectGroupId, $securityLevel)
	{
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT p.id, p.name, p.name_slug
			FROM ".$qa_generic.".project p
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.project_id = p.id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND p.status != 0
				AND p.security_level <= ".$securityLevel."
			GROUP BY p.name
			ORDER BY p.name ASC";
		$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

		return $result;
	}

	/**
	 * Get basic informations of project identified by given slug.
	 *
	 * @param string $slug The slug.
	 *
     * @return array An associative array with identifier and name of the project, or NULL.
	 */
	public function getBasicProjectBySlug($slug)
	{
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT p.id, p.name, p.name_slug
			FROM ".$qa_generic.".project p
			WHERE p.name_slug = '".$slug."'";
		$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetch(PDO::FETCH_ASSOC);

		if(!empty($result))
			return $result;

		return null;
	}

	/**
	 * Get basic information of a given project.
	 *
	 * @param int $id The project identifier.
	 *
	 * @return array An associative array with informations of the project, or NULL.
	 */
	public function getBasicProjectById($id)
	{
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT p.id, p.name, p.name_slug
			FROM ".$qa_generic.".project p
			WHERE p.id = ".$id."";
		$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetch(PDO::FETCH_ASSOC);

		if(!empty($result))
			return $result;

		return null;
	}

	/**
	 * Get the slug of a given project.
	 *
	 * @param int $id The project identifier.
	 *
	 * @return string The slug of the project.
	 */
	public function getSlugById($id)
	{
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT p.name_slug
			FROM ".$qa_generic.".project p
			WHERE p.id = ".$id."";
		$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetch(PDO::FETCH_ASSOC);

		if(!empty($result))
			return $result["name_slug"];

		return null;
	}

    /**
     * Apply filter for backend.
     */
    public function applyUsernameFilter($query, $value)
    {
        $query = $query->andWhere('user_id = ?', $value[0]);

        return $query;
    }






    /**
     * @deprecated
     * @param unknown $projectGroupId
     * @return multitype:unknown
     */
    public function getNames($projectGroupId)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = Doctrine_Manager::getInstance()->getCurrentConnection();
    	$result = $query->execute("
			SELECT DISTINCT p.id, p.name
				FROM ".$qa_generic.".project p
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.project_id = p.id
				WHERE ptp.project_group_id = ".$projectGroupId."
				ORDER BY p.name ASC
		");
    	$array = $result->fetchAll();

    	$projects = array();
    	foreach($array as $row)
    	{
    		$projects[$row["id"]] = $row["name"];
    	}

    	return $projects;
    }

    /**
     * @deprecated
     * Get a project by its slug name.
     *
     * @param slug The slugified name.
     *
     * @return The first item of the collection.
     */
    public function getProjectBySlug($slug)
    {
    	$query = Doctrine_Core::getTable("Project")
	    	->createQuery("p")
	    	->where("LOWER(REPLACE(REPLACE(REPLACE(p.name, '.', '-'), ' ' , '-'), '_' , '-')) = ?", $slug);

    	return $query->fetchOne();
    }
}