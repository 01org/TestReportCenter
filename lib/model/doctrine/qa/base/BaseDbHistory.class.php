<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('DbHistory', 'qa_core');

/**
 * BaseDbHistory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $version
 * @property text $comment
 * @property timestamp $changed_at
 * @property integer $user_id
 * @property sfGuardUser $User
 * 
 * @method string      getVersion()    Returns the current record's "version" value
 * @method text        getComment()    Returns the current record's "comment" value
 * @method timestamp   getChangedAt()  Returns the current record's "changed_at" value
 * @method integer     getUserId()     Returns the current record's "user_id" value
 * @method sfGuardUser getUser()       Returns the current record's "User" value
 * @method DbHistory   setVersion()    Sets the current record's "version" value
 * @method DbHistory   setComment()    Sets the current record's "comment" value
 * @method DbHistory   setChangedAt()  Sets the current record's "changed_at" value
 * @method DbHistory   setUserId()     Sets the current record's "user_id" value
 * @method DbHistory   setUser()       Sets the current record's "User" value
 * 
 * @package    trc
 * @subpackage model
 * @author     Julian Dumez <julianx.dumez@intel.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDbHistory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('db_history');
        $this->hasColumn('version', 'string', 128, array(
             'type' => 'string',
             'primary' => true,
             'length' => 128,
             ));
        $this->hasColumn('comment', 'text', null, array(
             'type' => 'text',
             'notnull' => true,
             ));
        $this->hasColumn('changed_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));


        $this->index('fk_core_db_history_core_user', array(
             'fields' => 
             array(
              0 => 'user_id',
             ),
             ));
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'no action',
             'onUpdate' => 'no action'));
    }
}