<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('FileAttachment', 'qa_generic');

/**
 * BaseFileAttachment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property text $comment
 * @property integer $user_id
 * @property timestamp $uploaded_at
 * @property string $filename
 * @property integer $file_size
 * @property string $file_mime_type
 * @property string $link
 * @property string $checksum
 * @property integer $table_name_id
 * @property integer $table_entry_id
 * @property integer $category
 * @property TableName $TableName
 * 
 * @method integer        getId()             Returns the current record's "id" value
 * @method string         getName()           Returns the current record's "name" value
 * @method text           getComment()        Returns the current record's "comment" value
 * @method integer        getUserId()         Returns the current record's "user_id" value
 * @method timestamp      getUploadedAt()     Returns the current record's "uploaded_at" value
 * @method string         getFilename()       Returns the current record's "filename" value
 * @method integer        getFileSize()       Returns the current record's "file_size" value
 * @method string         getFileMimeType()   Returns the current record's "file_mime_type" value
 * @method string         getLink()           Returns the current record's "link" value
 * @method string         getChecksum()       Returns the current record's "checksum" value
 * @method integer        getTableNameId()    Returns the current record's "table_name_id" value
 * @method integer        getTableEntryId()   Returns the current record's "table_entry_id" value
 * @method integer        getCategory()       Returns the current record's "category" value
 * @method TableName      getTableName()      Returns the current record's "TableName" value
 * @method FileAttachment setId()             Sets the current record's "id" value
 * @method FileAttachment setName()           Sets the current record's "name" value
 * @method FileAttachment setComment()        Sets the current record's "comment" value
 * @method FileAttachment setUserId()         Sets the current record's "user_id" value
 * @method FileAttachment setUploadedAt()     Sets the current record's "uploaded_at" value
 * @method FileAttachment setFilename()       Sets the current record's "filename" value
 * @method FileAttachment setFileSize()       Sets the current record's "file_size" value
 * @method FileAttachment setFileMimeType()   Sets the current record's "file_mime_type" value
 * @method FileAttachment setLink()           Sets the current record's "link" value
 * @method FileAttachment setChecksum()       Sets the current record's "checksum" value
 * @method FileAttachment setTableNameId()    Sets the current record's "table_name_id" value
 * @method FileAttachment setTableEntryId()   Sets the current record's "table_entry_id" value
 * @method FileAttachment setCategory()       Sets the current record's "category" value
 * @method FileAttachment setTableName()      Sets the current record's "TableName" value
 * 
 * @package    trc
 * @subpackage model
 * @author     Julian Dumez <julianx.dumez@intel.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseFileAttachment extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('file_attachment');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('comment', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('uploaded_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('filename', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('file_size', 'integer', 8, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 8,
             ));
        $this->hasColumn('file_mime_type', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('link', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('checksum', 'string', 64, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 64,
             ));
        $this->hasColumn('table_name_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('table_entry_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('category', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));


        $this->index('fk_file_attachment_table1', array(
             'fields' => 
             array(
              0 => 'table_name_id',
             ),
             ));
        $this->index('idx_file_attachement_table_entry_id', array(
             'fields' => 
             array(
              0 => 'table_entry_id',
             ),
             ));
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('TableName', array(
             'local' => 'table_name_id',
             'foreign' => 'id',
             'onDelete' => 'no action',
             'onUpdate' => 'no action'));
    }
}