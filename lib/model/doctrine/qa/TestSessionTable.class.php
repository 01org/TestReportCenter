<?php

/**
 * TestSessionTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TestSessionTable extends PluginTestSessionTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object TestSessionTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TestSession');
    }

    /**
     * Get all sessions and images values for given product.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     *
     * @return array An associative array with session values, counters, and images values.
     */
    public function getSessionsForProduct($projectGroupId, $projectId, $productId)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT i.id AS i_id, i.name AS i_name, i.name_slug AS i_slug, te.name_slug AS te_slug, ts.id, ts.name, ts.status, ts.created_at, ts.project_release, ts.project_milestone,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY i.name DESC, ts.created_at DESC";
		$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

		return $result;
    }

    /**
     * Get all sessions and images values for given environment.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     *
     * @return array An associative array with session values, counters, and images values.
     */
    public function getSessionsForEnvironment($projectGroupId, $projectId, $productId, $environmentId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT i.id AS i_id, i.name AS i_name, i.name_slug AS i_slug, ts.id, ts.name, ts.status, ts.created_at, ts.project_release, ts.project_milestone,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY i.name DESC, ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions values for given image.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     * @param int $imageId The image identifier.
     *
     * @return array An associative array with session values and counters.
     */
    public function getSessionsForImage($projectGroupId, $projectId, $productId, $environmentId, $imageId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id, ts.name, ts.status, ts.created_at, ts.project_release, ts.project_milestone,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions and images values for given environment.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $buildId The build identifier.
     *
     * @return array An associative array with session values, counters, and images values.
     */
    public function getSessionsForBuild($projectGroupId, $projectId, $productId, $buildId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT i.id AS i_id, i.name AS i_name, i.name_slug AS i_slug, te.name_slug AS te_slug, ts.id, ts.name, ts.status, ts.created_at, ts.project_release, ts.project_milestone,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.build_id = '".$buildId."'
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY i.name DESC, ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions and images values for given product with build ids.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     *
     * @return array An associative array with session values, counters, and images values.
     */
    public function getSessionsForProductForBuilds($projectGroupId, $projectId, $productId)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT i.id AS i_id, i.name AS i_name, i.name_slug AS i_slug, te.name_slug AS te_slug, ts.id, ts.name, ts.status, ts.created_at, ts.project_release, ts.project_milestone, ts.build_id, ts.build_slug,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.published = 1
				AND ts.build_id != ''
			GROUP BY ts.id
			ORDER BY ts.build_id DESC, ts.created_at DESC";
		$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

		return $result;
    }

    /**
     * Get all sessions and images values for given environment for build ids.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $buildId The build identifier.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     *
     * @return array An associative array with session values, counters, and images values.
     */
    public function getSessionsForEnvironmentForBuilds($projectGroupId, $projectId, $buildId, $productId, $environmentId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT i.id AS i_id, i.name AS i_name, i.name_slug AS i_slug, ts.id, ts.name, ts.status, ts.created_at, ts.project_release, ts.project_milestone,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ts.build_id = '".$buildId."'
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY i.name DESC, ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions values for given image with build ids.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $buildId The project identifier.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     * @param int $imageId The image identifier.
     *
     * @return array An associative array with session values and counters.
     */
    public function getSessionsForImageForBuilds($projectGroupId, $projectId, $buildId, $productId, $environmentId, $imageId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id, ts.name, ts.status, ts.created_at, ts.project_release, ts.project_milestone, ts.build_id, ts.build_slug,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ts.build_id = '".$buildId."'
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions and images values for given environment.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $testset The testset.
     *
     * @return array An associative array with session values, counters, and images values.
     */
    public function getSessionsForTestset($projectGroupId, $projectId, $productId, $testset)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT i.id AS i_id, i.name AS i_name, i.name_slug AS i_slug, te.name_slug AS te_slug, ts.id, ts.name, ts.status, ts.created_at, ts.project_release, ts.project_milestone,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.testset = '".$testset."'
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY i.name DESC, ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions and images values for given product with testsets.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     *
     * @return array An associative array with session values, counters, and images values.
     */
    public function getSessionsForProductForTestsets($projectGroupId, $projectId, $productId)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT i.id AS i_id, i.name AS i_name, i.name_slug AS i_slug, te.name_slug AS te_slug, ts.id, ts.name, ts.status, ts.created_at, ts.project_release, ts.project_milestone, ts.testset, ts.testset_slug,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.published = 1
				AND ts.testset != ''
			GROUP BY ts.id
			ORDER BY ts.testset ASC, ts.created_at DESC";
		$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

		return $result;
    }

    /**
     * Get all sessions and images values for given environment for testsets.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $testset The testset.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     *
     * @return array An associative array with session values, counters, and images values.
     */
    public function getSessionsForEnvironmentForTestsets($projectGroupId, $projectId, $testset, $productId, $environmentId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT i.id AS i_id, i.name AS i_name, i.name_slug AS i_slug, ts.id, ts.name, ts.status, ts.created_at, ts.project_release, ts.project_milestone,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ts.testset = '".$testset."'
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY i.name DESC, ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions values for given image with testsets.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $testset The testset.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     * @param int $imageId The image identifier.
     *
     * @return array An associative array with session values and counters.
     */
    public function getSessionsForImageForTestsets($projectGroupId, $projectId, $testset, $productId, $environmentId, $imageId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id, ts.name, ts.status, ts.created_at, ts.project_release, ts.project_milestone, ts.build_id, ts.build_slug,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ts.testset = '".$testset."'
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions id for given product.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     *
     * @return array An associative array with sessions id.
     */
    public function getSessionsIdForProduct($projectGroupId, $projectId, $productId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY i.name ASC, ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions id for given environment.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     *
     * @return array An associative array with sessions id.
     */
    public function getSessionsIdForEnvironment($projectGroupId, $projectId, $productId, $environmentId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY i.name ASC, ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions id for given image.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     * @param int $imageId The image identifier.
     *
     * @return array An associative array with session id.
     */
    public function getSessionsIdForImage($projectGroupId, $projectId, $productId, $environmentId, $imageId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions id for given build.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param string $buildId The build identifier.
     *
     * @return array An associative array with sessions id.
     */
    public function getSessionsIdForBuild($projectGroupId, $projectId, $productId, $buildId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.build_id = '".$buildId."'
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY i.name ASC, ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions id for given product, grouping by build_id.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     *
     * @return array An associative array with sessions id.
     */
    public function getSessionsIdForProductBuild($projectGroupId, $projectId, $productId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.build_id IS NOT NULL
				AND ts.build_id <> ''
				AND ts.published = 1
			GROUP BY ts.build_id
			ORDER BY i.name ASC, ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions id for given environment, grouping by build_id.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param string $buildId The build identifier.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     *
     * @return array An associative array with sessions id.
     */
    public function getSessionsIdForEnvironmentBuild($projectGroupId, $projectId, $buildId, $productId, $environmentId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND ts.build_id= '".$buildId."'
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY i.name ASC, ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions id for given image, grouping by build_id.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param string $buildId The build identifier.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     * @param int $imageId The image identifier.
     *
     * @return array An associative array with session id.
     */
    public function getSessionsIdForImageBuild($projectGroupId, $projectId, $buildId, $productId, $environmentId, $imageId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.build_id = '".$buildId."'
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions id for given testset.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param string $testset The testset name.
     *
     * @return array An associative array with sessions id.
     */
    public function getSessionsIdForTestset($projectGroupId, $projectId, $productId, $testset)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.testset = '".$testset."'
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY i.name ASC, ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions id for given product, grouping by testset.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     *
     * @return array An associative array with sessions id.
     */
    public function getSessionsIdForProductTestset($projectGroupId, $projectId, $productId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.testset IS NOT NULL
				AND ts.testset <> ''
				AND ts.published = 1
			GROUP BY ts.testset
			ORDER BY i.name ASC, ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions id for given environment, grouping by testset.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param string $testset The testset name.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     *
     * @return array An associative array with sessions id.
     */
    public function getSessionsIdForEnvironmentTestset($projectGroupId, $projectId, $testset, $productId, $environmentId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND ts.testset = '".$testset."'
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY i.name ASC, ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions id for given image, grouping by testset.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param string $testset The testset name.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     * @param int $imageId The image identifier.
     *
     * @return array An associative array with session id.
     */
    public function getSessionsIdForImageTestset($projectGroupId, $projectId, $testset, $productId, $environmentId, $imageId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.testset = '".$testset."'
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY ts.created_at DESC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all the latest sessions values for given image.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     * @param int $imageId The image identifier.
     * @param int $limit The number of test sessions to return.
     *
     * @return array An associative array with session values.
     */
    public function getLatestSessionsForImage($projectGroupId, $projectId, $productId, $environmentId, $imageId, $limit = 2)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id, ts.name, ts.status, ts.test_objective, ts.qa_summary, ts.user_id, ts.created_at, ts.editor_id, ts.updated_at, ts.project_release, ts.project_milestone,
			ts.issue_summary, ts.status, ts.published, ts.configuration_id, ts.campaign_checksum
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.published = 1
			ORDER BY ts.created_at DESC
    		LIMIT ".$limit;
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all the latest sessions values for given image and given build index.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $buildId The build identifier.
     * @param int $environmentId The environment identifier.
     * @param int $imageId The image identifier.
     * @param int $limit The number of test sessions to return.
     *
     * @return array An associative array with session values.
     */
    public function getLatestSessionsForImageBuild($projectGroupId, $projectId, $productId, $buildId, $environmentId, $imageId, $limit = 2)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id, ts.name, ts.status, ts.test_objective, ts.qa_summary, ts.user_id, ts.created_at, ts.editor_id, ts.updated_at, ts.project_release, ts.project_milestone,
			ts.issue_summary, ts.status, ts.published, ts.configuration_id, ts.campaign_checksum
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.build_id = '".$buildId."'
				AND ts.published = 1
			ORDER BY ts.created_at DESC
    		LIMIT ".$limit;
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all the latest sessions values for given image and given testset.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $testset The testset name.
     * @param int $environmentId The environment identifier.
     * @param int $imageId The image identifier.
     * @param int $limit The number of test sessions to return.
     *
     * @return array An associative array with session values.
     */
    public function getLatestSessionsForImageTestset($projectGroupId, $projectId, $productId, $testset, $environmentId, $imageId, $limit = 2)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id, ts.name, ts.status, ts.test_objective, ts.qa_summary, ts.user_id, ts.created_at, ts.editor_id, ts.updated_at, ts.project_release, ts.project_milestone,
			ts.issue_summary, ts.status, ts.published, ts.configuration_id, ts.campaign_checksum
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".test_environment te ON te.id = c.test_environment_id
				JOIN ".$qa_generic.".image i ON i.id = c.image_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.testset = '".$testset."'
				AND ts.published = 1
			ORDER BY ts.created_at DESC
    		LIMIT ".$limit;
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get total of passed/failed/blocked results for the given product and grouped by images.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with total results and total of pass/fail/block results grouped by images.
     */
    public function getSessionNumbersForProduct($projectGroupId, $projectId, $productId, $limit = 20)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT * FROM (SELECT i.id, i.name,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_session ts ON ts.configuration_id = c.id
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.published = 1
			GROUP BY i.id
			ORDER BY i.name DESC
			LIMIT ".$limit.") AS tbl ORDER BY tbl.name ASC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get total of passed/failed/blocked results for the given product and grouped by images.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with total results and total of pass/fail/block results grouped by images.
     */
    public function getSessionNumbersForEnvironment($projectGroupId, $projectId, $productId, $environmentId, $limit = 20)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT * FROM (SELECT i.id, i.name,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_session ts ON ts.configuration_id = c.id
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND ts.published = 1
			GROUP BY i.id
			ORDER BY i.name DESC
			LIMIT ".$limit.") AS tbl ORDER BY tbl.name ASC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get total of passed/failed/blocked results for the given image and grouped by creation date.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $imageId The image identifier.
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with total results and total of pass/fail/block results grouped by images.
     */
    public function getSessionNumbersForImage($projectGroupId, $projectId, $productId, $environmentId, $imageId, $limit = 20)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT * FROM (SELECT ts.created_at,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_session ts ON ts.configuration_id = c.id
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY ts.created_at DESC
			LIMIT ".$limit.") AS tbl ORDER BY tbl.created_at ASC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get total of passed/failed/blocked results for the given build id and grouped by images.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param string $buildId The build identifier.
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with total results and total of pass/fail/block results grouped by images.
     */
    public function getSessionNumbersForBuild($projectGroupId, $projectId, $productId, $buildId, $limit = 20)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT * FROM (SELECT i.id, i.name,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_session ts ON ts.configuration_id = c.id
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.build_id = '".$buildId."'
				AND ts.published = 1
			GROUP BY i.id
			ORDER BY i.name DESC
			LIMIT ".$limit.") AS tbl ORDER BY tbl.name ASC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get total of passed/failed/blocked results for the given product and grouped by images for build ids.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with total results and total of pass/fail/block results grouped by images.
     */
    public function getSessionNumbersForProductForBuilds($projectGroupId, $projectId, $productId, $limit = 20)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT * FROM (SELECT ts.build_id,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_session ts ON ts.configuration_id = c.id
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.published = 1
				AND ts.build_id != ''
			GROUP BY ts.build_id
			ORDER BY ts.build_id DESC
			LIMIT ".$limit.") AS tbl ORDER BY tbl.build_id ASC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get total of passed/failed/blocked results for the given product and grouped by images for build ids.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with total results and total of pass/fail/block results grouped by images.
     */
    public function getSessionNumbersForEnvironmentForBuilds($projectGroupId, $projectId, $buildId, $productId, $environmentId, $limit = 20)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT * FROM (SELECT i.id, i.name,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_session ts ON ts.configuration_id = c.id
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ts.build_id = '".$buildId."'
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND ts.published = 1
			GROUP BY i.id
			ORDER BY i.name DESC
			LIMIT ".$limit.") AS tbl ORDER BY tbl.name ASC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get total of passed/failed/blocked results for the given image and grouped by creation date.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $imageId The image identifier.
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with total results and total of pass/fail/block results grouped by images.
     */
    public function getSessionNumbersForImageForBuilds($projectGroupId, $projectId, $buildId, $productId, $environmentId, $imageId, $limit = 20)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT * FROM (SELECT ts.created_at,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_session ts ON ts.configuration_id = c.id
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ts.build_id = '".$buildId."'
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY ts.created_at DESC
			LIMIT ".$limit.") AS tbl ORDER BY tbl.created_at ASC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get total of passed/failed/blocked results for the given testset id and grouped by images.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param string $testset The testset.
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with total results and total of pass/fail/block results grouped by images.
     */
    public function getSessionNumbersForTestset($projectGroupId, $projectId, $productId, $testset, $limit = 20)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT * FROM (SELECT i.id, i.name,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_session ts ON ts.configuration_id = c.id
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.testset = '".$testset."'
				AND ts.published = 1
			GROUP BY i.id
			ORDER BY i.name DESC
			LIMIT ".$limit.") AS tbl ORDER BY tbl.name ASC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get total of passed/failed/blocked results for the given product and grouped by images for testsets.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with total results and total of pass/fail/block results grouped by images.
     */
    public function getSessionNumbersForProductForTestsets($projectGroupId, $projectId, $productId, $limit = 20)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT ts.testset,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_session ts ON ts.configuration_id = c.id
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.published = 1
				AND ts.testset != ''
			GROUP BY ts.testset
			ORDER BY ts.testset DESC
			LIMIT ".$limit."";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get total of passed/failed/blocked results for the given product and grouped by images for testsets.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with total results and total of pass/fail/block results grouped by images.
     */
    public function getSessionNumbersForEnvironmentForTestsets($projectGroupId, $projectId, $testset, $productId, $environmentId, $limit = 20)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT * FROM (SELECT i.id, i.name,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_session ts ON ts.configuration_id = c.id
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ts.testset = '".$testset."'
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND ts.published = 1
			GROUP BY i.id
			ORDER BY i.name DESC
			LIMIT ".$limit.") AS tbl ORDER BY tbl.name ASC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get total of passed/failed/blocked results for the given image and grouped by creation date.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $imageId The image identifier.
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with total results and total of pass/fail/block results grouped by images.
     */
    public function getSessionNumbersForImageForTestsets($projectGroupId, $projectId, $testset, $productId, $environmentId, $imageId, $limit = 20)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT * FROM (SELECT ts.created_at,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".image i
				JOIN ".$qa_generic.".configuration c ON c.image_id = i.id
				JOIN ".$qa_generic.".test_session ts ON ts.configuration_id = c.id
				JOIN ".$qa_generic.".test_result tr ON tr.test_session_id = ts.id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ts.testset = '".$testset."'
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.published = 1
			GROUP BY ts.id
			ORDER BY ts.created_at DESC
			LIMIT ".$limit.") AS tbl ORDER BY tbl.created_at ASC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get total of passed/failed/blocked results for the given session.
     *
     * @param int $sessionId The session identifier.
     *
     * @return array An associative array with total results and total of pass/fail/block results, or NULL.
     */
    public function getSessionNumbers($sessionId)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_result tr
			WHERE tr.test_session_id = ".$sessionId."";
		$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetch(PDO::FETCH_ASSOC);

		if(!empty($result))
			return $result;

		return null;
    }

    /**
     * Get total of measured/passed/failed/blocked results for the given session.
     *
     * @param int $sessionId The session identifier.
     *
     * @return array An associative array with total results and total of measured/pass/fail/block results, or NULL.
     */
    public function getSessionNumbersWithMeasures($sessionId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT COUNT(meas.id) AS total_measured,
    			COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_result tr
				LEFT JOIN ".$qa_generic.".measure meas ON meas.test_result_id = tr.id AND meas.category = 1
			WHERE tr.test_session_id = ".$sessionId."";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetch(PDO::FETCH_ASSOC);

    	if(!empty($result))
    		return $result;

    	return null;
    }

    /**
     * Get numbers for summary result of test sessions.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $imageId The image identifier.
     * @param int $limit The number of rows to retrieve.
     * @param string $dateTime The datetime (format 'Y-m-d H:i:s').
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with statitistics.
     */
    public function getSummaryNumbers($projectGroupId, $projectId, $productId, $environmentId, $imageId, $datetime, $limit = 3)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id, ts.name, ts.status, ts.created_at,
				COUNT(*) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_result tr
				JOIN ".$qa_generic.".test_session ts ON ts.id = tr.test_session_id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.created_at < '".$datetime."'
				AND ts.published = 1
			GROUP BY tr.test_session_id
			ORDER BY ts.created_at DESC
			LIMIT ".$limit."";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get numbers for summary result of test sessions.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $imageId The image identifier.
     * @param int $limit The number of rows to retrieve.
     * @param string $dateTime The datetime (format 'Y-m-d H:i:s').
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with statitistics.
     */
    public function getSummaryNumbersForBuild($projectGroupId, $projectId, $productId, $buildId, $environmentId, $imageId, $datetime, $limit = 3)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id, ts.name, ts.status, ts.created_at,
				COUNT(*) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_result tr
				JOIN ".$qa_generic.".test_session ts ON ts.id = tr.test_session_id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.build_id = '".$buildId."'
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.created_at < '".$datetime."'
				AND ts.published = 1
			GROUP BY tr.test_session_id
			ORDER BY ts.created_at DESC
			LIMIT ".$limit."";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get numbers for summary result of test sessions.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $imageId The image identifier.
     * @param int $limit The number of rows to retrieve.
     * @param string $dateTime The datetime (format 'Y-m-d H:i:s').
     * @param int $limit The number of rows to retrieve.
     *
     * @return array An associative array with statitistics.
     */
    public function getSummaryNumbersForTestset($projectGroupId, $projectId, $productId, $testset, $environmentId, $imageId, $datetime, $limit = 3)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id, ts.name, ts.status, ts.created_at,
				COUNT(*) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run
			FROM ".$qa_generic.".test_result tr
				JOIN ".$qa_generic.".test_session ts ON ts.id = tr.test_session_id
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.testset = '".$testset."'
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.created_at < '".$datetime."'
				AND ts.published = 1
			GROUP BY tr.test_session_id
			ORDER BY ts.created_at DESC
			LIMIT ".$limit."";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get regression counts based on the last two test session ids.
     *
     * @param int $previousSessionId The previous test session id.
     * @param int $lastSessionId The last test session id.

     * @return array An associative array with session values.
     */
    public function getRegressionCounts($previousSessionId, $lastSessionId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT
					COUNT(CASE WHEN tr1.decision_criteria_id = -2 THEN tr1.decision_criteria_id END) AS pass2fail,
					COUNT(CASE WHEN tr1.decision_criteria_id = -3 THEN tr1.decision_criteria_id END) AS pass2block
					FROM ".$qa_generic.".test_result tr1
					JOIN ".$qa_generic.".table_name tn ON tn.name = 'test_result'
					JOIN ".$qa_generic.".complementary_tool_relation ctr ON ctr.table_name_id = tn.id
					WHERE tr1.test_session_id=".$lastSessionId."
						AND ctr.table_entry_id = tr1.id
						AND (tr1.name, ctr.label) IN
							(SELECT tr2.name, ctr.label
							FROM ".$qa_generic.".test_result tr2
							JOIN ".$qa_generic.".table_name tn ON tn.name = 'test_result'
							JOIN ".$qa_generic.".complementary_tool_relation ctr ON ctr.table_name_id = tn.id
							WHERE tr2.test_session_id=".$previousSessionId."
							AND tr2.decision_criteria_id=-1
							AND ctr.table_entry_id = tr2.id)";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetch(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get progress counts based on the last two test session ids.
     *
     * @param int $previousSessionId The previous test session id.
     * @param int $lastSessionId The last test session id.

     * @return array An associative array with session values.
     */
    public function getProgressCounts($previousSessionId, $lastSessionId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT
					COUNT(CASE WHEN tr1.decision_criteria_id = -2 THEN tr1.decision_criteria_id END) AS fail2pass,
					COUNT(CASE WHEN tr1.decision_criteria_id = -3 THEN tr1.decision_criteria_id END) AS block2pass
					FROM ".$qa_generic.".test_result tr1
					JOIN ".$qa_generic.".table_name tn ON tn.name = 'test_result'
					JOIN ".$qa_generic.".complementary_tool_relation ctr ON ctr.table_name_id = tn.id
					WHERE tr1.test_session_id=".$previousSessionId."
						AND ctr.table_entry_id = tr1.id
						AND (tr1.name, ctr.label) IN
							(SELECT tr2.name, ctr.label
							FROM ".$qa_generic.".test_result tr2
							JOIN ".$qa_generic.".table_name tn ON tn.name = 'test_result'
							JOIN ".$qa_generic.".complementary_tool_relation ctr ON ctr.table_name_id = tn.id
							WHERE tr2.test_session_id=".$lastSessionId."
							AND tr2.decision_criteria_id=-1
							AND ctr.table_entry_id = tr2.id)";
		$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetch(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get new counts based on the last two test session ids.
     *
     * @param int $previousSessionId The previous test session id.
     * @param int $lastSessionId The last test session id.

     * @return array An associative array with session values.
     */
    public function getNewCounts($previousSessionId, $lastSessionId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT
					COUNT(CASE WHEN tr1.decision_criteria_id = -1 THEN tr1.decision_criteria_id END) AS new_pass,
					COUNT(CASE WHEN tr1.decision_criteria_id = -2 THEN tr1.decision_criteria_id END) AS new_fail,
					COUNT(CASE WHEN tr1.decision_criteria_id = -3 THEN tr1.decision_criteria_id END) AS new_block
					FROM ".$qa_generic.".test_result tr1
					JOIN ".$qa_generic.".table_name tn ON tn.name = 'test_result'
					JOIN ".$qa_generic.".complementary_tool_relation ctr ON ctr.table_name_id = tn.id
					WHERE tr1.test_session_id=".$lastSessionId."
						AND ctr.table_entry_id = tr1.id
						AND (tr1.name, ctr.label) NOT IN
							(SELECT tr2.name, ctr.label
							FROM ".$qa_generic.".test_result tr2
							JOIN ".$qa_generic.".table_name tn ON tn.name = 'test_result'
							JOIN ".$qa_generic.".complementary_tool_relation ctr ON ctr.table_name_id = tn.id
							WHERE tr2.test_session_id=".$previousSessionId."
							AND ctr.table_entry_id = tr2.id)";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetch(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all results' features for given session.
     *
     * @param int $sessionId The session identifier.
     *
     * @return array An associative array with features' labels.
     */
    public function getFeatures($sessionId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ctr.label,
				COUNT(*) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END)/COUNT(tr.id) * 100 AS percentage
			FROM ".$qa_generic.".complementary_tool_relation ctr
				JOIN ".$qa_generic.".table_name tn ON tn.id = ctr.table_name_id
				JOIN ".$qa_generic.".test_result tr ON tr.id = ctr.table_entry_id
			WHERE tn.name = 'test_result'
				AND tr.test_session_id = ".$sessionId."
			GROUP BY ctr.label
			ORDER BY ctr.label";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get total of passed/failed/blocked results for each feature of the given session.
     *
     * @param int $sessionId The session identifier.
     *
     * @return array An associative array with features labels and total of passed/failed/blocked results for each feature, or NULL.
     */
    public function getFeaturesNumbers($sessionId)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ctr.label, ctr.id,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END)/COUNT(tr.id) * 100 AS percentage
			FROM ".$qa_generic.".complementary_tool_relation ctr
				JOIN ".$qa_generic.".table_name tn ON tn.id = ctr.table_name_id
				JOIN ".$qa_generic.".test_result tr ON tr.id = ctr.table_entry_id
			WHERE tn.name = 'test_result'
				AND tr.test_session_id = ".$sessionId."
			GROUP BY ctr.label
			ORDER BY ctr.label";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

		if(!empty($result))
			return $result;

		return null;
    }

    /**
     * Get total of measured/passed/failed/blocked results for each feature of the given session.
     *
     * @param int $sessionId The session identifier.
     *
     * @return array An associative array with features labels and total of measured/passed/failed/blocked results for each feature, or NULL.
     */
    public function getFeaturesNumbersWithMeasures($sessionId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ctr.label, ctr.id,
    			COUNT(meas.id) AS total_measured,
				COUNT(tr.id) AS total,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END) AS pass,
				COUNT(CASE WHEN tr.decision_criteria_id = -2 THEN tr.decision_criteria_id END) AS fail,
				COUNT(CASE WHEN tr.decision_criteria_id = -3 THEN tr.decision_criteria_id END) AS block,
				COUNT(CASE WHEN tr.decision_criteria_id = -4 THEN tr.decision_criteria_id END) AS deferred,
				COUNT(CASE WHEN tr.decision_criteria_id = -5 THEN tr.decision_criteria_id END) AS not_run,
				COUNT(CASE WHEN tr.decision_criteria_id = -1 THEN tr.decision_criteria_id END)/COUNT(tr.id) * 100 AS percentage
			FROM ".$qa_generic.".complementary_tool_relation ctr
				JOIN ".$qa_generic.".table_name tn ON tn.id = ctr.table_name_id
				JOIN ".$qa_generic.".test_result tr ON tr.id = ctr.table_entry_id
				LEFT JOIN ".$qa_generic.".measure meas ON meas.test_result_id = tr.id AND meas.category = 1
			WHERE tn.name = 'test_result'
				AND tr.test_session_id = ".$sessionId."
			GROUP BY ctr.label
			ORDER BY ctr.label";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	if(!empty($result))
    		return $result;

    	return null;
    }

    /**
     * Get all results for the given session.
     *
     * @param int $sessionId The session identifier.
     *
     * @return array An associative array with results values and feature label, or NULL.
     */
    public function getSessionResults($sessionId)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ctr.label, tr.name, tr.decision_criteria_id, tr.complement, tr.status, tr.bugs, tr.comment, tr.id
				FROM ".$qa_generic.".test_result tr
					JOIN ".$qa_generic.".complementary_tool_relation ctr ON ctr.table_entry_id = tr.id
					JOIN ".$qa_generic.".table_name tn ON tn.id = ctr.table_name_id
				WHERE tn.name = 'test_result'
					AND tr.test_session_id = ".$sessionId."
					AND (SELECT COUNT(m.id) FROM ".$qa_generic.".measure m WHERE m.test_result_id = tr.id AND m.category = 1) = 0
				ORDER BY ctr.label ASC, tr.name ASC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

		return $result;
    }

    /**
     * Get all measures for the given session.
     *
     * @param int $sessionId The session identifier.
     *
     * @return array An associative array with measures values (value, target, fail limit) and feature label.
     */
    public function getSessionMeasures($sessionId)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT ctr.label, tr.id, tr.name, tr.complement, tr.decision_criteria_id, tr.status, tr.bugs, tr.comment, m.description, m.value, m.unit, m.category, m.operator, m.measure_id
				FROM ".$qa_generic.".test_result tr
					JOIN ".$qa_generic.".complementary_tool_relation ctr ON ctr.table_entry_id = tr.id
					JOIN ".$qa_generic.".table_name tn ON tn.id = ctr.table_name_id
					JOIN ".$qa_generic.".measure m ON m.test_result_id = tr.id
				WHERE tn.name = 'test_result'
					AND tr.test_session_id = ".$sessionId."
				ORDER BY ctr.label ASC, tr.name ASC";
		$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

		$testResults = array();
		$testResult = null;
		$values = array();

		$resultId = null;
		foreach($result as $row)
		{
			// For each test result
			if($resultId != $row["id"])
			{
				// Push previous test result and its values into main array
				if($testResult != null)
				{
					if(!empty($values))
						$testResult["measures"] = $values;
					array_push($testResults, $testResult);
				}

				// Set current result identifier
				$resultId = $row["id"];

				// Build current test result
				$testResult = array("label" => $row["label"], "id" => $row["id"], "name" => $row["name"], "complement" => $row["complement"], "decision_criteria_id" => $row["decision_criteria_id"], "comment" => $row["comment"]);
				$values = array();
			}

			// Assume for now there is only one triplet value/target/limit
			if($row["category"] == 1)
			{
				// TODO Append other result's values to same array
				$values["value"] = array("value" => $row["value"], "unit" => $row["unit"], "operator" => $row["operator"], "description" => $row["description"]);
			}
			else if($row["category"] == 2)
			{
				$values["target"] = array("value" => $row["value"], "unit" => $row["unit"], "description" => $row["description"]);
			}
			else if($row["category"] == 3)
			{
				$values["limit"] = array("value" => $row["value"], "unit" => $row["unit"], "description" => $row["description"]);
			}
		}

		// Push last test result and values into main array
		if($testResult != null)
		{
			if(!empty($values))
				$testResult["measures"] = $values;
			array_push($testResults, $testResult);
		}

		return $testResults;
    }

    /**
     * Get all file attachments for the given session.
     *
     * @param int $sessionId The session identifier.
     * @param int $category The category of file attachments to retrieve (1: reports, 2: attachments).
     *
     * @return array An associative array with values of file attachements.
     */
    public function getFileAttachments($sessionId, $category)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT fa.id, fa.name, fa.link
			FROM ".$qa_generic.".file_attachment fa
				JOIN ".$qa_generic.".table_name tn ON tn.id = fa.table_name_id
			WHERE tn.name = 'test_session'
				AND fa.table_entry_id = ".$sessionId."
				AND fa.category = ".$category."
			ORDER BY fa.name ASC";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions newer or older than the given datetime.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     * @param int $imageId The image identifier.
     * @param string $dateTime The datetime (format 'Y-m-d H:i:s').
     * @param int $limit The number of rows to retrieve.
     * @param boolean $newer TRUE to get newer sessions, FALSE to get older sessions.
     *
     * @return array An associative array with sessions values.
     */
    public function getSessionsByDate($projectGroupId, $projectId, $productId, $environmentId, $imageId, $dateTime, $limit, $newer)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT ts.id, ts.name, ts.status, ts.test_objective, ts.qa_summary, ts.user_id, ts.created_at, ts.editor_id, ts.updated_at, ts.project_release, ts.project_milestone,
			ts.issue_summary, ts.status, ts.published, ts.configuration_id, ts.campaign_checksum, ts.build_id
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.created_at ".($newer ? ">" : "<")." '".$dateTime."'
				AND ts.published = 1
			ORDER BY ts.created_at ".($newer ? "ASC" : "DESC")."
			LIMIT ".$limit."";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions newer or older than the given datetime.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     * @param int $imageId The image identifier.
     * @param string $dateTime The datetime (format 'Y-m-d H:i:s').
     * @param int $limit The number of rows to retrieve.
     * @param boolean $newer TRUE to get newer sessions, FALSE to get older sessions.
     *
     * @return array An associative array with sessions values.
     */
    public function getSessionsByDateForBuild($projectGroupId, $projectId, $productId, $buildId, $environmentId, $imageId, $dateTime, $limit, $newer)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT ts.id, ts.build_id, ts.name, ts.status, ts.test_objective, ts.qa_summary, ts.user_id, ts.created_at, ts.editor_id, ts.updated_at, ts.project_release, ts.project_milestone,
			ts.issue_summary, ts.status, ts.published, ts.configuration_id, ts.campaign_checksum, ts.build_slug
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.build_id = '".$buildId."'
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.created_at ".($newer ? ">" : "<")." '".$dateTime."'
				AND ts.published = 1
			ORDER BY ts.created_at ".($newer ? "ASC" : "DESC")."
			LIMIT ".$limit."";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions newer or older than the given datetime.
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     * @param int $imageId The image identifier.
     * @param string $dateTime The datetime (format 'Y-m-d H:i:s').
     * @param int $limit The number of rows to retrieve.
     * @param boolean $newer TRUE to get newer sessions, FALSE to get older sessions.
     *
     * @return array An associative array with sessions values.
     */
    public function getSessionsByDateForTestset($projectGroupId, $projectId, $productId, $testset, $environmentId, $imageId, $dateTime, $limit, $newer)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT ts.id, ts.build_id, ts.name, ts.status, ts.test_objective, ts.qa_summary, ts.user_id, ts.created_at, ts.editor_id, ts.updated_at, ts.project_release, ts.project_milestone,
			ts.issue_summary, ts.status, ts.published, ts.configuration_id, ts.campaign_checksum, ts.build_slug
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND ts.testset = '".$testset."'
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.created_at ".($newer ? ">" : "<")." '".$dateTime."'
				AND ts.published = 1
			ORDER BY ts.created_at ".($newer ? "ASC" : "DESC")."
			LIMIT ".$limit."";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get all sessions newer or older than the given datetime and with the same checksum
     *
     * @param int $projectGroupId The project group identifier.
     * @param int $projectId The project identifier.
     * @param int $productId The product identifier.
     * @param int $environmentId The environment identifier.
     * @param int $imageId The image identifier.
     * @param string $dateTime The datetime (format 'Y-m-d H:i:s').
     * @param int $limit The number of rows to retrieve.
     * @param string $checksum The CRC to identify identical sessions.
     * @param boolean $newer TRUE to get newer sessions, FALSE to get older sessions.
     *
     * @return array An associative array with sessions values.
     */
    public function getSessionsByDateAndBuild($projectGroupId, $projectId, $productId, $environmentId, $imageId, $dateTime, $limit, $checksum, $newer)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");

    	$query = "SELECT ts.id, ts.name, ts.status, ts.test_objective, ts.qa_summary, ts.user_id, ts.created_at, ts.editor_id, ts.updated_at, ts.project_release, ts.project_milestone,
			ts.issue_summary, ts.status, ts.published, ts.configuration_id, ts.campaign_checksum
			FROM ".$qa_generic.".test_session ts
				JOIN ".$qa_generic.".configuration c ON c.id = ts.configuration_id
				JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = c.project_to_product_id
			WHERE ptp.project_group_id = ".$projectGroupId."
				AND ptp.project_id = ".$projectId."
				AND ptp.product_id = ".$productId."
				AND c.test_environment_id = ".$environmentId."
				AND c.image_id = ".$imageId."
				AND ts.created_at ".($newer ? ">" : "<")." '".$dateTime."'
				AND ts.published = 1
				AND ts.campaign_checksum = '".$checksum."'
			ORDER BY ts.created_at ".($newer ? "ASC" : "DESC")."
			LIMIT ".$limit."";
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

    	return $result;
    }

    /**
     * Get configuration information for the given session.
     *
     * @param int $sessionId The session identifier.
     *
     * @return array An associative array with configuration names (proj_name, img_name, te_name, product_name), or NULL.
     */
    public function getConfigInfo($sessionId)
    {
    	$qa_generic = sfConfig::get("app_table_qa_generic");
    	$qa_core = sfConfig::get("app_table_qa_core");

    	// Retrieve project name, test environment name and image name, relying on test session id
    	$query = "SELECT te.name AS te_name, img.name AS img_name, proj.name AS proj_name, product.name AS product_name
				FROM ".$qa_generic.".test_session ts
					JOIN ".$qa_generic.".configuration conf ON conf.id = ts.configuration_id
					JOIN ".$qa_generic.".test_environment te ON te.id = conf.test_environment_id
					JOIN ".$qa_generic.".image img ON img.id = conf.image_id
					JOIN ".$qa_generic.".project_to_product ptp ON ptp.id = conf.project_to_product_id
					JOIN ".$qa_generic.".project proj ON proj.id = ptp.project_id
					JOIN ".$qa_core.".product_type product ON product.id = ptp.product_id
				WHERE ts.id = ".$sessionId;
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetch(PDO::FETCH_ASSOC);

    	if(!empty($result))
    		return $result;

    	return null;
    }

    /**
     * Get the three last used build ids by default.
     *
     * @param number $limit The number of build ids to retrieve.
	 *
     * @return array An associative array with values of retrieved build ids, or NULL.
     */
    public function getLastBuildIds($limit = 3)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT DISTINCT ts.build_id
			FROM ".$qa_generic.".test_session ts
			ORDER BY ts.created_at DESC
			LIMIT ".$limit;
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

		return $result;
    }

    /**
     * Get the three last used testsets by default.
     *
     * @param number $limit The number of testsets to retrieve.
	 *
     * @return array An associative array with values of retrieved testsets, or NULL.
     */
    public function getLastTestsets($limit = 3)
    {
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT DISTINCT ts.testset
			FROM ".$qa_generic.".test_session ts
			ORDER BY ts.created_at DESC
			LIMIT ".$limit;
    	$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetchAll(PDO::FETCH_ASSOC);

		return $result;
    }

	/**
	 * Get basic informations of test session identified by given build slug.
	 *
	 * @param string $slug The slug.
	 *
     * @return array An associative array with informations of the test session, or NULL.
	 */
	public function getBasicBuildBySlug($slug)
	{
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT ts.build_id, ts.build_slug
			FROM ".$qa_generic.".test_session ts
			WHERE ts.build_slug = '".$slug."'";
		$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetch(PDO::FETCH_ASSOC);

		if(!empty($result))
			return $result;

		return null;
	}

	/**
	 * Get basic informations of test session identified by given testset slug.
	 *
	 * @param string $slug The slug.
	 *
     * @return array An associative array with informations of the test session, or NULL.
	 */
	public function getBasicTestsetBySlug($slug)
	{
		$qa_generic = sfConfig::get("app_table_qa_generic");

		$query = "SELECT ts.testset, ts.testset_slug
			FROM ".$qa_generic.".test_session ts
			WHERE ts.testset_slug = '".$slug."'";
		$result = Doctrine_Manager::getInstance()->getCurrentConnection()->execute($query)->fetch(PDO::FETCH_ASSOC);

		if(!empty($result))
			return $result;

		return null;
	}

	/**
	 * Apply filter for backend.
	 */
    public function applyUsernameFilter($query, $value)
    {
        $query = $query->andWhere('user_id = ?', $value[0]);

        return $query;
    }

	/**
	 * Apply filter for backend.
	 */
    public function applyEditorFilter($query, $value)
    {
        $query = $query->andWhere('editor_id = ?', $value[0]);

        return $query;
    }
}
